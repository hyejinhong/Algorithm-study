package boj;

import java.util.*;
public class BOJ_1149 {
	
	static int n;
	static int[][] cost = new int[1000][3];
	static int[] colors = new int[1000];
	static int[][] cache = new int[1000][3];
	static final int RED = 0;
	static final int GREEN = 1;
	static final int BLUE = 2;
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner scan = new Scanner(System.in);
		n = scan.nextInt();
		for(int i=0; i<n; i++) {
			for(int j=0; j<3; j++) {
				cost[i][j] = scan.nextInt();	
			}
		}
		
		for(int[] row : cache) {
			Arrays.fill(row, -1);
		}
		
		int result = Integer.MAX_VALUE;
		for(int i=0; i<3; i++) {
			result = Math.min(result, calculate(n, i));
		}
		System.out.println(result);
	}
	
	// num개의 집을 모두 칠하는 최소 비용을 반환, num번째 집은 color색으로 색칠함
	public static int calculate(int num, int color) {
		// 기저: 다 칠했다
		if(num == 0) {
			return 0;
		}
		
		// 캐시가 있다면..
		if(cache[num][color] != -1) {
			return cache[num][color];
		}
		
		// 캐시가 없다면..
		int ret = 0;
		int nextColor = -1;
		
		if(color == RED) {
			nextColor = cost[num][GREEN] <= cost[num][BLUE] ? GREEN : BLUE;
		}
		else if(color == GREEN) {
			nextColor = cost[num][RED] <= cost[num][BLUE] ? RED : BLUE;
		}
		else if(color == BLUE) {
			nextColor = cost[num][GREEN] <= cost[num][RED] ? GREEN : RED;
		}
		ret = calculate(num-1, nextColor) + cost[num][color];
		cache[num-1][nextColor] = ret;
		return ret;
	}
}
