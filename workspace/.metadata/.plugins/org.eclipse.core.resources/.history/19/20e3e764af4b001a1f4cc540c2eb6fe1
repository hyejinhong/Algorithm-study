package algospot;

import java.util.*;
public class AsymTiling {
	
	static int n;
	static final int MOD = 1000000007;
	final static int[] cache = new int[101];
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner scan = new Scanner(System.in);
		int c = scan.nextInt();
		
		for(int test=1; test<=c; test++) {
			n = scan.nextInt();
			Arrays.fill(cache, -1);
			System.out.println(asymmetric(n));
		}
	}
	
	// 2*width 크기의 사각형을 채우는 비대칭 방법의 수를 반환
	public static int asymmetric(int width) {
		if(width%2 == 1) {
			return (tiling(width) - tiling(width/2) + MOD) % MOD;
		}
		
		int ret = tiling(width);
		ret = (ret - tiling(width/2) + MOD) % MOD;
		ret = (ret - tiling(width/2-1) + MOD) % MOD;
		return ret;
	}
	
	public static int tiling(int width) {
		// 기저: 다 채움
		if(width <= 0) {
			return 0;
		}
		
		// 캐시가 있다면..
		if(cache[width] != -1) {
			return cache[width];
		}
		
		// 캐시가 없다면.. 계산
		cache[width] = (tiling(width-1) + tiling(width-2)) % MOD;
		return cache[width];
	}
}
