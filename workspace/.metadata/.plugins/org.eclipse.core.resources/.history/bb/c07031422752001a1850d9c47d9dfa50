package boj;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

class MyQueue {
	int[] arr;
	int start;
	int end;
	
	public MyQueue(int size) {
		arr = new int[size];
		start = 0;
		end = 0;
	}
	
	public void push(int x) {
		arr[end++] = x;
	}
	
	public void pop() {
		if(start == end) {
			System.out.println(-1);
			return;
		}
		
		int x = arr[start++];
		System.out.println(x);
	}
	
	public void size() {
		System.out.println(end-start);
	}
	
	public void empty() {
		if(start == end) {
			System.out.println(1);
		}
		else {
			System.out.println(0);
		}
	}
	
	public void front() {
		if(start == end) {
			System.out.println(-1);
			return;
		}
		int x = arr[start];
		System.out.println(x);
	}
	
	public void back() {
		if(start == end) {
			System.out.println(-1);
			return;
		}
		int x = arr[end-1];
		System.out.println(x);
	}
}

public class BOJ_18258 {

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		int n = Integer.parseInt(br.readLine());
		MyQueue myQueue = new MyQueue(2000000);
		
		for(int i=0; i<n; i++) {
			String str = br.readLine();
			StringTokenizer stk = new StringTokenizer(str);
			
			String oper = stk.nextToken();
			
			// push
			

			switch(oper) {
			case "push":
				myQueue.push(Integer.parseInt(stk.nextToken()));
				break;
			case "pop":
				myQueue.pop();
				break;
			case "size":
				myQueue.size();
				break;
			case "empty":
				myQueue.empty();
				break;
			case "front":
				myQueue.front();
				break;
			case "back":
				myQueue.back();
				break;
			
		}
		}
	}

}
