package boj;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Collections;
import java.util.LinkedList;
import java.util.StringTokenizer;

class Meeting implements Comparable<Meeting> {
	int start;
	int end;
	
	public Meeting(int start, int end) {
		this.start = start;
		this.end = end;
	}

	@Override
	public int compareTo(Meeting o) {
		// TODO Auto-generated method stub
		return this.end > o.end ? 1 : -1;
	}
}

public class BOJ_1931 {

	static int n;
	static LinkedList<Meeting> meetings = new LinkedList<>();
	
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		n = Integer.parseInt(br.readLine());
		
		for(int i=0; i<n; i++) {
			StringTokenizer stk = new StringTokenizer(br.readLine());
			int start = Integer.parseInt(stk.nextToken());
			int end = Integer.parseInt(stk.nextToken());
			
			meetings.add(new Meeting(start, end));
		}
		
		System.out.println(schedule());
	}
	
	// 최대 사용할 수 있느 회의 수 반환
	public static int schedule() {
		// 비어있는가?
		if(meetings.isEmpty()) {
			return 0;
		}
		
		int count = 0;
		Collections.sort(meetings);
		
		// 회의 전체 집합이 빌 때까지
		while(!meetings.isEmpty()) {
			// 가장 먼저 끝나는 것을 찾는다

			Meeting selected = meetings.poll();
			
			for(int i=0; i<meetings.size(); i++) {
				Meeting compare = meetings.get(i);

				// 겹치면 목록에서 제거
				if(compare.start < selected.end) {
					meetings.remove(compare);
				}
				// 안 겹치면
				else {
					count++;
					break;
				}
			}
		}
		return count;
	}

}
