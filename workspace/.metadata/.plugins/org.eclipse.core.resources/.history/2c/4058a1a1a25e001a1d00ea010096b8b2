package boj;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Collections;
import java.util.LinkedList;
import java.util.StringTokenizer;

class Meeting implements Comparable<Meeting> {
	int start;
	int end;
	
	public Meeting(int start, int end) {
		this.start = start;
		this.end = end;
	}

	@Override
	public int compareTo(Meeting o) {
		// TODO Auto-generated method stub
//		return 0;
		return this.end < o.end ? 1 : -1;
	}
}

public class BOJ_1931 {

	static int n;
	static LinkedList<Meeting> meetings = new LinkedList<>();
	
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		n = Integer.parseInt(br.readLine());
		
		for(int i=0; i<n; i++) {
			StringTokenizer stk = new StringTokenizer(br.readLine());
			int start = Integer.parseInt(stk.nextToken());
			int end = Integer.parseInt(stk.nextToken());
			
			meetings.add(new Meeting(start, end));
		}
		
		count();
	}
	
	// 최대 사용할 수 있느 회의 수 반환
	public static int count() {
		// 기저
		if(meetings.isEmpty()) {
			return 0;
		}
		
		System.out.println(meetings.toString());
		// 가장 먼저 끝나는 회의를 찾는다
		Collections.sort(meetings);
		System.out.println(meetings.toString());
		return 0;
	}

}
