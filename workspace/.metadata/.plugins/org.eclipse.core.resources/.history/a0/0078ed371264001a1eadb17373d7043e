package algospot;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Routing {
	static class Edge implements Comparable<Edge>{

		int index;
		double noise;
		
		Edge(int index, double noise) {
			this.index = index;
			this.noise = noise;
		}
		
		@Override
		public int compareTo(Edge o) {
			// TODO Auto-generated method stub
			if(this.noise > o.noise) {
				return 1;
			}
			else if(this.noise < o.noise) {
				return -1;
			}
			return 0;
		}
		
	}
	
	static class Node implements Comparable<Node> {
		int index;
		double noise; // index 노드까지 증폭된 noise
		
		Node(int index, double noise) {
			this.index = index;
			this.noise = noise;
		}
		
		@Override
		public int compareTo(Node o) {
			// TODO Auto-generated method stub
			return Double.compare(this.noise, o.noise);
		}
		
	}
	static int n;
	static int m;
	static ArrayList<Edge>[] graph = new ArrayList[10000];

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int c = Integer.parseInt(br.readLine());

		for(int test=1; test<=c; test++) {
			StringTokenizer stk = new StringTokenizer(br.readLine());
			n = Integer.parseInt(stk.nextToken());
			m = Integer.parseInt(stk.nextToken());
			
			for(int i=0; i<n; i++) {
				graph[i] = new ArrayList<Edge>();
			}
			
			for(int i=0; i<m; i++) {
				stk = new StringTokenizer(br.readLine());
				
				int a = Integer.parseInt(stk.nextToken());
				int b = Integer.parseInt(stk.nextToken());
				double w = Double.parseDouble(stk.nextToken());
				
				graph[a].add(new Edge(b, w));
				graph[b].add(new Edge(a, w));
			}
		}
		
		dijkstra(0);
	}
	
	public static void dijkstra(int start) {
		PriorityQueue<Node> q = new PriorityQueue<Node>();
		double[] noise = new double[n];
		
		q.add(new Node(start, 1.0));
		noise[start] = 1.0;
		
		while(!q.isEmpty()) {
			Node n = q.poll();
			
			for(int i=0; i<graph[n.index].size(); i++) {
				Edge edge = graph[n.index].get(i);
				
				if(edge.index == 0) {
					continue;
				}
				
				if(noise[edge.index] == 0) {
					noise[edge.index] = n.noise * edge.noise;
					q.add(new Node(edge.index, noise[edge.index]));
				}
				else if(noise[edge.index] > n.noise * edge.noise){
					noise[edge.index] = n.noise * edge.noise;
					q.add(new Node(edge.index, noise[edge.index]));
				}
			}
		}

		System.out.println(noise[n-1]);
	}

}
