package boj;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class BOJ_11053 {
	
	static int n;
	static int[] arr = new int[1001];
	static int[] cache = new int[1001];
	
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		n = Integer.parseInt(br.readLine());
		
		StringTokenizer stk = new StringTokenizer(br.readLine());
		for(int i=0; i<n; i++) {
			arr[i] = Integer.parseInt(stk.nextToken());
		}
		
		Arrays.fill(cache, -1);
		
		System.out.println(lis(0, arr[0]));
	}
	
	// [0, num] 범위에서 가장 긴 증가하는 부분수열의 길이를 반환한다.
	// last는 현재까지 구한 부분증가수열의 마지막 원소
	public static int lis(int num, int last) {
		// 기저
		if(num == n+1) {
			return 0;
		}
		
		// 캐시가 있으면
		if(cache[num] != -1) {
			return cache[num];
		}
		
		// 캐시가 없으면 계산
		int ret = 0;
		if(last < arr[num]) {
			ret = lis(n+1, arr[num]) - 1;
		}
		else {
			ret = lis(n+1, last);
		}
		cache[num] = ret;
		return ret;
	}

}
