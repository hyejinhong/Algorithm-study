package boj;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.StringTokenizer;

public class BOJ_14501 {

	static int n;
	static int[] t = new int[16];
	static int[] p = new int[16];
	
	static boolean[] avail = new boolean[16];
//	static boolean[] selected = new boolean[16];
	static ArrayList<Integer> selected = new ArrayList<>();
	static int result = Integer.MIN_VALUE;
	
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		n = Integer.parseInt(br.readLine());
		
		for(int i=1; i<=n; i++) {
			StringTokenizer stk = new StringTokenizer(br.readLine());
			t[i] = Integer.parseInt(stk.nextToken());
			p[i] = Integer.parseInt(stk.nextToken());
		}
		Arrays.fill(avail, true);
		schedule(0, 0);
		System.out.println(result);
	}
	
	public static void schedule(int day) {
		// 기저
		if(day + t[day] - 1 > n || day > n) {
			return;
		}

		int r1 = 0, r2;
		
		// 오늘 상담을 한다
		avail[day] = true;
		selected.add(day);
		
		// 상담 못하는 날 설정
		int days = t[day];
		for(int i=1; i<days; i++) {
			avail[day+i] = false;
		}
		
		// 모든 경우의 수 탐색
		for(int i=day+1; i<=n; i++) {
			// 상담이 가능한 날이면
			if(avail[i]) {
//				selected.add(i);
				schedule(i);
				r1 = calculate();
//				selected.remove(selected.size()-1);
			}
		}
		
		// 오늘 상담을 안한다
		selected.remove(new Integer(day));
		for(int i=1; i<days; i++) {
			avail[day+i] = true;
		}
		// 모든 경우의 수 탐색
		for(int i=day+1; i<=n; i++) {
			if(avail[i]) {
//				selected.add(i);
				schedule(i);
//				selected.remove(selected.size()-1);
				r2 = Math.max(r1, calculate());
			}
		}
	}
	
	public static int calculate() {
		int sum = 0;
		for(int i=0; i<selected.size(); i++) {
			sum += p[selected.get(i)];
		}
		System.out.println(selected.toString());
		System.out.println(sum);
		System.out.println("***********************");
		if(result < sum) {
			result = sum;
		}
		return result;

	}
	
	static void schedule(int day, int money) {
		
		if(day>=n) {
			result = Math.max(result, money);
			return;
		}
		if(day+t[day]<=n)
				schedule(day+t[day],money+p[day]);
			
		schedule(day+1,money);
		
		
	}
}
